package dk.controller;

import dk.model.entity.Customer;
import dk.model.service.bt1.CustomerService;
import dk.model.service.bt1.CustomerService.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

@Controller
public class AuthController {

    @Autowired
    private CustomerService customerService;

    // ======= REGISTER METHODS =======
    @GetMapping("/register")
    public String showRegisterForm(Model model) {
        model.addAttribute("customer", new Customer());
        return "bt1/register";
    }

    @PostMapping("/register")
    public String registerCustomer(@Valid @ModelAttribute("customer") Customer customer,
                                   BindingResult result,
                                   Model model,
                                   RedirectAttributes redirectAttributes) {

        // Ki·ªÉm tra validation errors t·ª´ annotation
        if (result.hasErrors()) {
            model.addAttribute("errorMessage", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá!");
            return "bt1/register";
        }

        try {
            // G·ªçi service ƒë·ªÉ ƒëƒÉng k√Ω
            customerService.registerCustomer(customer);

            // Th√†nh c√¥ng - chuy·ªÉn h∆∞·ªõng v·ªõi th√¥ng b√°o
            redirectAttributes.addFlashAttribute("successMessage",
                    "üéâ Ch√∫c m·ª´ng! T√†i kho·∫£n '" + customer.getUsername() + "' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            redirectAttributes.addFlashAttribute("customer", customer);

            return "redirect:/register/success";

        } catch (ServiceException e) {
            // L·ªói t·ª´ service - hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
            model.addAttribute("errorMessage", e.getMessage());
            return "bt1/register";

        } catch (Exception e) {
            // L·ªói kh√¥ng mong mu·ªën
            model.addAttribute("errorMessage", "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra trong h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!");
            // Log l·ªói ƒë·ªÉ debug (n√™n s·ª≠ d·ª•ng logger th·ª±c t·∫ø)
            System.err.println("Unexpected error in register: " + e.getMessage());
            e.printStackTrace();
            return "bt1/register";
        }
    }

    @GetMapping("/register/success")
    public String showSuccessPage() {
        return "bt1/result";
    }

    // ======= LOGIN METHODS =======
    @GetMapping("/login")
    public String showLoginForm(Model model) {
        model.addAttribute("customer", new Customer());
        return "bt2/login";
    }

    @PostMapping("/login")
    public String loginCustomer(@ModelAttribute("customer") Customer customer,
                                BindingResult result,
                                Model model,
                                HttpSession session,
                                RedirectAttributes redirectAttributes) {

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
        if (customer.getUsername() == null || customer.getUsername().trim().isEmpty()) {
            model.addAttribute("errorMessage", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!");
            return "bt2/login";
        }

        if (customer.getPassword() == null || customer.getPassword().trim().isEmpty()) {
            model.addAttribute("errorMessage", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!");
            return "bt2/login";
        }

        try {
            // X√°c th·ª±c th√¥ng tin ƒëƒÉng nh·∫≠p
            Customer authenticatedCustomer = customerService.authenticateCustomer(
                    customer.getUsername().trim(),
                    customer.getPassword()
            );

            // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            session.setAttribute("loggedInUser", authenticatedCustomer);
            session.setAttribute("username", authenticatedCustomer.getUsername());
            session.setAttribute("role", authenticatedCustomer.getRole());

            // Chuy·ªÉn h∆∞·ªõng d·ª±a tr√™n role
            if ("ADMIN".equals(authenticatedCustomer.getRole())) {
                redirectAttributes.addFlashAttribute("successMessage",
                        "üîë Ch√†o m·ª´ng Admin " + authenticatedCustomer.getUsername() + "!");
                return "redirect:/admin";
            } else {
                redirectAttributes.addFlashAttribute("successMessage",
                        "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng " + authenticatedCustomer.getUsername() + "!");
                return "redirect:/home";
            }

        } catch (ServiceException e) {
            // L·ªói x√°c th·ª±c - hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
            model.addAttribute("errorMessage", e.getMessage());
            return "bt2/login";

        } catch (Exception e) {
            // L·ªói kh√¥ng mong mu·ªën
            model.addAttribute("errorMessage", "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra trong h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!");
            // Log l·ªói ƒë·ªÉ debug
            System.err.println("Unexpected error in login: " + e.getMessage());
            e.printStackTrace();
            return "bt2/login";
        }
    }

    // ======= LOGOUT METHOD =======
    @GetMapping("/logout")
    public String logout(HttpSession session, RedirectAttributes redirectAttributes) {
        try {
            String username = (String) session.getAttribute("username");
            session.invalidate();

            redirectAttributes.addFlashAttribute("successMessage",
                    "üëã ƒêƒÉng xu·∫•t th√†nh c√¥ng" + (username != null ? "! H·∫πn g·∫∑p l·∫°i " + username : "") + "!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("successMessage", "ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
        }

        return "redirect:/login";
    }

    // ======= DASHBOARD PAGES =======
    @GetMapping("/admin")
    public String showAdminPage(HttpSession session, Model model) {
        Customer loggedInUser = (Customer) session.getAttribute("loggedInUser");

        if (loggedInUser == null) {
            model.addAttribute("errorMessage", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!");
            return "redirect:/login";
        }

        if (!"ADMIN".equals(loggedInUser.getRole())) {
            model.addAttribute("errorMessage", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
            return "redirect:/home";
        }

        model.addAttribute("user", loggedInUser);
        return "bt3/admin";
    }



    @GetMapping("/")
    public String redirectToLogin() {
        return "redirect:/login";
    }
}